---
import Incendio_Tunari_2017 from "../../../public/incendio-tunari-2017.jpg";
import Incendio_Tunari_2019 from "../../../public/incendio-tunari-2019.jpg";
import Incendio_Tunari_2019_2 from "../../../public/incendio-tunari-2019-2.jpg";
import Incendio_Tunari_2023 from "../../../public/incendio-tunari-2023.jpg";
import { Image } from "astro:assets";
const slides = [
  {
    image: Incendio_Tunari_2017,
    text1: "Lorem Ipsum Dolor sit Amet",
    text2: "Lorem ipsum dolor sit amet,consectetur adipiscing elit.",
    buttonText: "Button",
    buttonURL: "#",
  },
  {
    image: Incendio_Tunari_2019,
    text1: "Lorem Ipsum Dolor sit Amet",
    text2: "Lorem ipsum dolor sit amet,consectetur adipiscing elit.",
    buttonText: "Button",
    buttonURL: "#",
  },
  {
    image: Incendio_Tunari_2019_2,
    text1: "Lorem Ipsum Dolor sit Amet",
    text2: "Lorem ipsum dolor sit amet,consectetur adipiscing elit.",
    buttonText: "Button",
    buttonURL: "#",
  },
  {
    image: Incendio_Tunari_2023,
    text1: "Lorem Ipsum Dolor sit Amet",
    text2: "Lorem ipsum dolor sit amet,consectetur adipiscing elit.",
    buttonText: "Button",
    buttonURL: "#",
  },
];
export const prerender = true;
---

<div class="bg-[#f5ead6] w-full select-none">
  <div
    class="slider-container relative overflow-hidden max-w-7xl mx-auto xl:h-[760px] lg:h-[640px] md:h-[580px] sm:h-[500px] h-[350px] max-[420px]:h-[320px]"
  >
    <div class="slides flex transition-transform duration-500 ease-in-out">
      {
        slides.map((slide) => (
          <div class="slide flex-none w-full h-full flex items-center">
            <div class="w-full lg:w-1/2 p-8 flex flex-col justify-center">
              <p class="xl:text-2xl lg:text-xl text-lg font-body">
                {slide.text1}
              </p>
              <h2 class="xl:text-4xl lg:text-3xl md:text-2xl text-xl font-bold font-titles">
                {slide.text2}
              </h2>
              <button class="">
                <a href={slide.buttonURL}>{slide.buttonText}</a>
              </button>
            </div>
            <div class="w-full lg:w-1/2 xl:h-[710px] lg:h-[610px] md:h-[510px] sm:h-[470px] h-[320px] max-[390px]:h-[290px] mr-2">
              <Image
                src={slide.image}
                alt=""
                class="w-full h-full object-fill"
                draggable="false"
                loading="eager"
              />
            </div>
          </div>
        ))
      }
    </div>
    <div
      class="indicators absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2"
    >
      {
        slides.map((_, i) => (
          <div
            class={`indicator transition-all w-3 h-3 bg-[#f8fafc] border-[1px] border-black rounded-full ${i === 0 ? "p-1" : "bg-opacity-50"}`}
          />
        ))
      }
    </div>
  </div>
</div>

<script>
  let currentIndex = 0;
  const slides = document.querySelectorAll(".slide");
  const indicators = document.querySelectorAll(".indicator");
  let isDragging = false;
  let startPos = 0;
  let currentTranslate = 0;
  let prevTranslate = 0;
  let animationID;
  let autoSlideInterval;

  function setPositionByIndex() {
    currentTranslate =
      currentIndex *
      -document.querySelector<HTMLElement>(".slider-container").offsetWidth;
    prevTranslate = currentTranslate;
    setSliderPosition();
  }

  function setSliderPosition() {
    document.querySelector<HTMLElement>(".slides").style.transform =
      `translateX(${currentTranslate}px)`;
  }

  function autoSlide() {
    currentIndex = (currentIndex + 1) % slides.length;
    setPositionByIndex();
    updateIndicators();
  }

  function updateIndicators() {
    indicators.forEach((indicator, index) => {
      if (index === currentIndex) {
        indicator.classList.add("p-1");
        indicator.classList.remove("bg-opacity-50");
      } else {
        indicator.classList.remove("p-1");
        indicator.classList.add("bg-opacity-50");
      }
    });
  }

  function resetAutoSlide() {
    clearInterval(autoSlideInterval);
    autoSlideInterval = setInterval(autoSlide, 3000);
  }

  indicators.forEach((indicator, index) => {
    indicator.addEventListener("click", () => {
      currentIndex = index;
      setPositionByIndex();
      updateIndicators();
      resetAutoSlide();
    });
  });

  slides.forEach((slide, index) => {
    const slideImage = slide.querySelector("img");
    slideImage.addEventListener("dragstart", (e) => e.preventDefault());

    // Touch events
    slide.addEventListener("touchstart", touchStart(index));
    slide.addEventListener("touchend", touchEnd);
    slide.addEventListener("touchmove", touchMove);

    // Mouse events
    slide.addEventListener("mousedown", touchStart(index));
    slide.addEventListener("mouseup", touchEnd);
    slide.addEventListener("mouseleave", touchEnd);
    slide.addEventListener("mousemove", touchMove);
  });

  function touchStart(index) {
    return function (event) {
      currentIndex = index;
      startPos = getPositionX(event);
      isDragging = true;
      animationID = requestAnimationFrame(animation);
    };
  }

  function touchEnd() {
    isDragging = false;
    cancelAnimationFrame(animationID);
    const movedBy = currentTranslate - prevTranslate;

    if (movedBy < -100 && currentIndex < slides.length - 1) currentIndex += 1;
    if (movedBy > 100 && currentIndex > 0) currentIndex -= 1;

    setPositionByIndex();
    updateIndicators();
    resetAutoSlide();
  }

  function touchMove(event) {
    if (isDragging) {
      const currentPosition = getPositionX(event);
      currentTranslate = prevTranslate + currentPosition - startPos;
      setSliderPosition();
    }
  }

  function getPositionX(event) {
    return event.type.includes("mouse")
      ? event.pageX
      : event.touches[0].clientX;
  }

  function animation() {
    setSliderPosition();
    if (isDragging) requestAnimationFrame(animation);
  }

  autoSlideInterval = setInterval(autoSlide, 3000);
  setPositionByIndex();
  updateIndicators();
</script>
