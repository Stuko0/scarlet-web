---
import Incendio_Tunari_2017 from "../../public/incendio-tunari-2017.jpg"
import Incendio_Tunari_2019 from "../../public/incendio-tunari-2019.jpg"
import Incendio_Tunari_2019_2 from "../../public/incendio-tunari-2019-2.jpg"
import Incendio_Tunari_2023 from "../../public/incendio-tunari-2023.jpg"
import Buttons from "./buttons/Buttons.astro";
import { Image } from 'astro:assets';
const slides = [
{ image: Incendio_Tunari_2017, text1: 'Lorem Ipsum Dolor sit Amet', text2: 'Lorem ipsum dolor sit amet,consectetur adipiscing elit.', buttonText: 'Button', buttonURL: '#' },
{ image: Incendio_Tunari_2019, text1: 'Lorem Ipsum Dolor sit Amet', text2: 'Lorem ipsum dolor sit amet,consectetur adipiscing elit.', buttonText: 'Button', buttonURL: '#' },
{ image: Incendio_Tunari_2019_2, text1: 'Lorem Ipsum Dolor sit Amet', text2: 'Lorem ipsum dolor sit amet,consectetur adipiscing elit.', buttonText: 'Button', buttonURL: '#' },
{ image: Incendio_Tunari_2023, text1: 'Lorem Ipsum Dolor sit Amet', text2: 'Lorem ipsum dolor sit amet,consectetur adipiscing elit.', buttonText: 'Button', buttonURL: '#' },
];
export const prerender = true;
---

<div class="bg-[#f5ead6] w-full select-none">
  <div class="slider-container relative overflow-hidden max-w-7xl mx-auto xl:h-[760px] lg:h-[640px] md:h-[580px] sm:h-[500px] h-[350px] max-[420px]:h-[320px]">
    <div class="slides flex transition-transform duration-500 ease-in-out">
      {slides.map((slide) => (
        <div class="slide flex-none w-full h-full flex items-center">
          <div class="w-full lg:w-1/2 p-8 flex flex-col justify-center">
            <p class="xl:text-2xl lg:text-xl text-lg">{slide.text1}</p>
            <h2 class="xl:text-4xl lg:text-3xl md:text-2xl text-xl font-bold">{slide.text2}</h2>
            <Buttons variant="primary" size="base"><a href={slide.buttonURL}>{slide.buttonText}</a></Buttons>
          </div>
          <div class="w-full lg:w-1/2 xl:h-[710px] lg:h-[610px] md:h-[510px] sm:h-[470px] h-[320px] max-[390px]:h-[290px] mr-2">
            <Image src={slide.image} alt="" class="w-full h-full object-fill" draggable="false" loading="eager"/>
          </div>
        </div>
      ))}
    </div>
    <div class="indicators absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
      {slides.map((_, i) => (
        <div class={`indicator transition-all w-3 h-3 bg-[#f8fafc] border-[1px] border-black rounded-full ${i === 0 ? 'p-1' : 'bg-opacity-50'}`}/>
      ))}
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const slidesContainer = document.querySelector('.slides');
    const slides = document.querySelectorAll('.slide');
    const indicators = document.querySelectorAll('.indicator');
    let curr = 0;
    let startX = 0;
    let isDragging = false;
    const interval = 3000;
    let start;

    const nextSlide = () => {
      curr = (curr + 1) % slides.length;
      updateSlidePosition();
    };

    const goToSlide = (index) => {
      curr = index;
      updateSlidePosition();
    };

    const updateSlidePosition = () => {
      if (slidesContainer instanceof HTMLElement) {
        slidesContainer.style.transform = `translateX(-${curr * 100}%)`;
      }
      indicators.forEach((indicator, i) => {
        if (indicator instanceof HTMLElement) {
          indicator.classList.toggle('p-2', i === curr);
          indicator.classList.toggle('bg-opacity-50', i !== curr);
        }
      });
    };

    const handleStart = (e) => {
      startX = e.pageX || e.touches[0].clientX;
      isDragging = true;
      slidesContainer.classList.remove('transition-transform');
    };

    const handleMove = (e) => {
      if (!isDragging) return;
      const diffX = (e.pageX || e.touches[0].clientX) - startX;
      if (slidesContainer instanceof HTMLElement) {
        slidesContainer.style.transform = `translateX(calc(-${curr * 100}% + ${diffX}px))`;
      }
    };

    const handleEnd = (e) => {
      if (!isDragging) return;
      const diffX = (e.pageX || e.changedTouches[0].clientX) - startX;
      if (Math.abs(diffX) > 50) {
        if (diffX > 0) {
          curr = (curr - 1 + slides.length) % slides.length;
        } else {
          curr = (curr + 1) % slides.length;
        }
      }
      updateSlidePosition();
      isDragging = false;
      slidesContainer.classList.add('transition-transform');
    };

    indicators.forEach((indicator) => {
      indicator.addEventListener('click', (e) => {
        const index = parseInt((e.target as HTMLElement).getAttribute('data-index'));
        goToSlide(index);
      });
    });

    slidesContainer.addEventListener('mousedown', handleStart);
    slidesContainer.addEventListener('mousemove', handleMove);
    slidesContainer.addEventListener('mouseup', handleEnd);
    slidesContainer.addEventListener('mouseleave', handleEnd);

    slidesContainer.addEventListener('touchstart', handleStart);
    slidesContainer.addEventListener('touchmove', handleMove);
    slidesContainer.addEventListener('touchend', handleEnd);

    start = setInterval(nextSlide, interval);
  });
</script>